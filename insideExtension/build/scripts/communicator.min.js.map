{"version":3,"sources":["communicator.js"],"names":["Communicator","this","handlers","addListeners","prototype","chrome","extension","onRequest","addListener","msg","sender","callback","tab","communicator","handleMessage","id","windows","onRemoved","win_id","topic","i","len","length","junk","push","handler","unregisterHandler","registerHandler","splice","tab_id","tabs","get","forEach","x","windowId","data","console","warn","postMessage","frame","sendRequest","_frame","sendMessage","Promise","resolve","reject","broadcastMessage","getAllInWindow","getLastFocused","win"],"mappings":"AAMA,SAASA,eACLC,KAAKC,YACLD,KAAKE,eAITH,aAAaI,UAAUD,aAAe,WAElCE,OAAOC,UAAUC,UAAUC,YACvB,SAASC,EAAKC,EAAQC,GACbD,EAAOE,KAEZC,aAAaC,cAAcL,EAAKC,EAAOE,IAAIG,GAAIJ,KAIvDN,OAAOW,QAAQC,UAAUT,YAAY,SAASU,GAE1C,IAAK,IAAIC,KAASN,aAAaX,SAAU,CACrC,IAA+CkB,EAA3CC,EAAMR,aAAaX,SAASiB,GAAOG,OACnCC,KACJ,IAAKH,EAAI,EAAGA,EAAIC,EAAKD,IACbP,aAAaX,SAASiB,GAAOC,GAAGF,QAAUA,GAC1CK,EAAKC,KAAKX,aAAaX,SAASiB,GAAOC,GAAGK,SAGlD,IAAKL,EAAI,EAAGA,EAAIG,EAAKD,OAAQF,IACzBP,aAAaa,kBAAkBP,EAAOI,EAAKH,QAS3DpB,aAAaI,UAAUuB,gBAAkB,SAASR,EAAOM,EAASP,GACxDC,KAASlB,KAAKC,WAChBD,KAAKC,SAASiB,OAClBlB,KAAKC,SAASiB,GAAOK,MAAMC,QAASA,EAASP,OAAQA,KAGzDlB,aAAaI,UAAUsB,kBAAoB,SAASP,EAAOM,GACvD,GAAMN,KAASlB,KAAKC,SAEpB,IAAK,IAAIkB,EAAI,EAAGA,EAAInB,KAAKC,SAASiB,GAAOG,OAAQF,IAC7C,GAAInB,KAAKC,SAASiB,GAAOC,GAAGK,SAAWA,EAAS,CAC5CxB,KAAKC,SAASiB,GAAOS,OAAOR,EAAG,GAC/B,QAMZpB,aAAaI,UAAUU,cAAgB,SAASL,EAAKoB,EAAQlB,GACrDF,EAAIU,SAASlB,KAAKC,SAClBG,OAAOyB,KAAKC,IAAIF,EAAQ,SAASjB,GACxBA,GAELC,aAAaX,SAASO,EAAIU,OAAOa,QAAS,SAASC,GAC/C,OAAIA,EAAEf,QAAUe,EAAEf,QAAUN,EAAIsB,cAG5BD,EAAER,QAAQhB,EAAI0B,KAAMN,EAAQlB,IAQ5BsB,EAAER,QAAQhB,EAAI0B,KAAMN,QAChBlB,GACAA,UAMhByB,QAAQC,KAAK,+BAA+B5B,EAAIU,QAMxDnB,aAAaI,UAAUkC,YACnB,SAASnB,EAAOgB,EAAMN,EAAQlB,EAAU4B,GAExClC,OAAOyB,KAAKU,YACRX,GACCV,MAAOA,EAAOgB,KAAMA,EAAMM,OAAQF,GACnC5B,IAIRX,aAAaI,UAAUsC,YACnB,SAASvB,EAAOgB,EAAMN,EAAQU,GAE9B,OAAO,IAAII,QAAQ,SAASC,EAASC,GACjCxC,OAAOyB,KAAKY,YACRb,GACCV,MAAOA,EAAOgB,KAAMA,EAAMM,OAAQF,GACnCK,MAMZ5C,aAAaI,UAAU0C,iBAAmB,SAAS3B,EAAOgB,EAAMjB,GACxDA,EACAb,OAAOyB,KAAKiB,eAAe7B,EAAQ,SAASY,GACnCA,GAELA,EAAKE,QAAS,SAASpB,GACnBP,OAAOyB,KAAKU,YAAY5B,EAAIG,IAAKI,MAAOA,EAAOgB,KAAMA,GAC7B,kBAIhC9B,OAAOW,QAAQgC,eAAe,SAAUC,GACpCA,EAAInB,KAAKE,QAAS,SAASpB,GACvBP,OAAOyB,KAAKU,YAAY5B,EAAIG,IAAKI,MAAOA,EAAOgB,KAAMA,GAC7B,mBAOxC,IAAItB,aAAe,IAAIb","file":"communicator.min.js","sourcesContent":["/*\r\n(c) Copyright Ipswitch, Inc. - https://www.ipswitch.com\r\n*/\r\n\r\n\r\n// incapsulates all content scripts-extensions communications\r\nfunction Communicator() {\r\n    this.handlers = {};\r\n    this.addListeners();\r\n}\r\n\r\n// add listener for extension events\r\nCommunicator.prototype.addListeners = function() {\r\n    // listen to requests from content-scripts\r\n    chrome.extension.onRequest.addListener(\r\n        function(msg, sender, callback) {\r\n            if (!sender.tab)\r\n                return;\r\n            communicator.handleMessage(msg, sender.tab.id, callback);\r\n        }\r\n    );\r\n    \r\n    chrome.windows.onRemoved.addListener(function(win_id) {\r\n        // remove all handlers bind to the window\r\n        for (var topic in communicator.handlers) {\r\n            var len = communicator.handlers[topic].length, i;\r\n            var junk = [];\r\n            for (i = 0; i < len; i++) {\r\n                if (communicator.handlers[topic][i].win_id == win_id) {\r\n                    junk.push(communicator.handlers[topic][i].handler);\r\n                }\r\n            }\r\n            for (i = 0; i < junk.length; i++) {\r\n                communicator.unregisterHandler(topic, junk[i]);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\n// register handlers for specific content script messages\r\nCommunicator.prototype.registerHandler = function(topic, handler, win_id) {\r\n    if (!(topic in this.handlers))\r\n        this.handlers[topic] = [];\r\n    this.handlers[topic].push({handler: handler, win_id: win_id});\r\n};\r\n\r\nCommunicator.prototype.unregisterHandler = function(topic, handler) {\r\n    if (!(topic in this.handlers))\r\n        return;\r\n    for (var i = 0; i < this.handlers[topic].length; i++) {\r\n        if (this.handlers[topic][i].handler == handler) {\r\n            this.handlers[topic].splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n// handle message from script\r\nCommunicator.prototype.handleMessage = function(msg, tab_id, callback) {\r\n    if (msg.topic in this.handlers) {\r\n        chrome.tabs.get(tab_id, function(tab) {\r\n            if (!tab)\r\n                return;\r\n            communicator.handlers[msg.topic].forEach( function(x) {\r\n                if (x.win_id && x.win_id == tab.windowId) {\r\n                    // if win_id is set then call callback only if\r\n                    // it is set for the win_id the message came from\r\n                    x.handler(msg.data, tab_id, callback);\r\n                    // assume we have only one handler per window\r\n                    // and callback is called inside the handler\r\n                    return;\r\n                } else {\r\n                    // browser-wide message handler\r\n                    // currently we have only run-macro topic for\r\n                    // ookmarklet macros\r\n                    x.handler(msg.data, tab_id);\r\n                    if (callback)\r\n                        callback();\r\n                    return;\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        console.warn(\"Communicator: unknown topic \"+msg.topic);\r\n    }\r\n};\r\n\r\n\r\n// send message to specific tab\r\nCommunicator.prototype.postMessage =\r\n    function(topic, data, tab_id, callback, frame)\r\n{\r\n    chrome.tabs.sendRequest(\r\n        tab_id,\r\n        {topic: topic, data: data, _frame: frame},\r\n        callback\r\n    );\r\n};\r\n\r\nCommunicator.prototype.sendMessage =\r\n    function(topic, data, tab_id, frame)\r\n{\r\n    return new Promise(function(resolve, reject) {\r\n        chrome.tabs.sendMessage(\r\n            tab_id,\r\n            {topic: topic, data: data, _frame: frame},\r\n            resolve\r\n        );\r\n    });\r\n};\r\n\r\n// broadcast message\r\nCommunicator.prototype.broadcastMessage = function(topic, data, win_id) {\r\n    if (win_id) {\r\n        chrome.tabs.getAllInWindow(win_id, function(tabs) {\r\n            if (!tabs)\r\n                return;\r\n            tabs.forEach( function(tab) {\r\n                chrome.tabs.sendRequest(tab.id, {topic: topic, data: data},\r\n                                        function () {});\r\n            });\r\n        });\r\n    } else {\r\n        chrome.windows.getLastFocused(function (win) {\r\n            win.tabs.forEach( function(tab) {\r\n                chrome.tabs.sendRequest(tab.id, {topic: topic, data: data},\r\n                                        function () {});\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n\r\nvar communicator = new Communicator();\r\n"]}